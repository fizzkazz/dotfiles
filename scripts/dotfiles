#!/bin/sh

GIT_REPO=https://github.com/fizzkazz/dotfiles.git
CLONE_PATH=~
STOW_PACKAGES_PATH="$CLONE_PATH"/.dotfiles/packages

# Display warning message
function warn() {
    message=$1
    echo ⚠️ "$message"
}

# Requesting answer function
function ask() {
    message=$1
    echo ❓ "$message"
}

# Logging function
function log() {
    message=$1
    echo 📣 "$message"
}

# Make sure the file exists
function is_file() {
    path="$1"
    [ -f "$path" ]
}

# Make sure the directory exists
function is_dir() {
    path="$1"
    [ -d "$path" ]
}

# Make a directory if it does not exist
function ensure_dir() {
    path="$1"
    if ! is_dir "$path" ; then
        mkdir -p "$path"
    fi
}

function ask_y_n() {
    valid=false
    while ! "${valid}"
    do
        ask "$1"
        read input
        if [ ! $input = 'y' ] && [ ! $input = 'n' ] ; then
            warn "Invalid input. Please input (y/n) again."
        else
            valid=true
        fi
    done
    if [ $input = 'y' ] ; then
        return 0
    else
        return 2
    fi
}

ask "Input computer name. (If you input nothing, the computer name won't be changed.):"
read computer_name
if [ ${#computer_name} -gt 0 ] ; then
    scutil --set ComputerName "$computer_name"
fi

ask "Input host name. (If you input nothing, the host name won't be changed.):"
read host_name
if [ ${#host_name} -gt 0 ] ; then
    sudo scutil --set LocalHostName "$host_name"
fi

ask_y_n "Setup git? (y/n):"
if [ $? == 0 ] ; then
    valid_git_name=false
    while ! "$valid_git_name"
    do
        ask "Please input git name:"
        read git_name
        if [ ${#git_name} -gt 0 ] ; then
            valid_git_name=true
        else
            warn "Please input valid name."
        fi
    done

    valid_git_email=false
    while ! "$valid_git_email"
    do
        ask "Please input git email:"
        read git_email
        if [ ${#git_email} -gt 0 ] ; then
            valid_git_email=true
        else
            warn "Please input valid email address."
        fi
    done
    git config --global user.name "$git_name"
    git config --global user.email "$git_email"
    git config --global pull.rebase false
    git config --global init.defaultBranch main
    git config --global alias.sw switch
    git config --global alias.nb 'switch -c'
    git config --global alias.ad add
    git config --global alias.aa 'add -A'
    git config --global alias.ucs 'reset --soft HEAD^'
    git config --global alias.uch 'reset --hard HEAD^'
    git config --global alias.br branch
    git config --global alias.ci commit
    git config --global alias.st status
fi

ask_y_n "Install global cask packages? (y/n):"
if [ $? == 0 ] ; then
    install_global_cask=true
else
    install_global_cask=false
fi

ask_y_n "Install mas packages? (y/n):"
if [ $? == 0 ] ; then
    install_mas=true
else
    install_mas=false
fi

ask_y_n "Unlink packages first? (y/n):"
if [ $? == 0 ] ; then
    unlink_packages=true
else
    unlink_packages=false
fi

# Cloning dotfiles repository
ensure_dir "$CLONE_PATH"
if ! is_dir "$CLONE_PATH"/.dotfiles ; then
    log "Cloning the repository from $GIT_REPO"
    cd "$CLONE_PATH"
    git clone "$GIT_REPO" .dotfiles
fi

# Setup Homebrew if there is no Homebrew binary file
## Install Homebrew into the user directory
if ! is_file ~/homebrew/bin/brew ; then
    log 'Could not find Homebrew in `~/homebrew`. Setting up Homebrew.'
    mkdir -p ~/homebrew && curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C ~/homebrew
fi

## Export Homebrew PATH in order to use Homebrew command below
export PATH="$HOME/homebrew/bin:$PATH"

# Install Apps and CLI tools scripted in Brewfile
log 'Installing packages via Homebrew'
brew bundle --file "$CLONE_PATH"/.dotfiles/Brewfile
if "${install_global_cask}" ; then
    log 'Installing cask packages globally via Homebrew.'
    brew bundle --file "$CLONE_PATH"/.dotfiles/Brewfile_cask_global
fi
log 'Installing cask packages locally via Homebrew.'
brew bundle --file "$CLONE_PATH"/.dotfiles/Brewfile_cask_local
if "${install_mas}" ; then
    log 'Installing APP via mas.'
    brew bundle --file "$CLONE_PATH"/.dotfiles/Brewfile_mas
    sudo xcodebuild -license accept
fi

# Unlink packages if they have been specified
if "${unlink_packages}" ; then
    log 'Unlinking dotfiles...'
    stow -vD -d "$STOW_PACKAGES_PATH" -t ~ "$unlink_packages"
    exit
fi

# Symlinks
stow -vd "$STOW_PACKAGES_PATH" -t ~ $(ls $STOW_PACKAGES_PATH)

# Configure to sign commits locally using GPG suite
if ! is_dir ~/.gnupg || [ -z "$(gpg --list-secret-keys --keyid-format LONG)" ] ; then
    log 'Install gpg signing with git'
    gpg --default-new-key-algo rsa4096 --gen-key
    key_id=$(gpg --list-secret-keys --keyid-format LONG | ggrep -oP "rsa4096\/[0-9a-fA-F]{16}" | cut -d"/"  -f2)
    log 'Copy and pates the GPG key below to GitHub, Gitlab and Bitbucket'
    gpg --armor --export "$key_id"
    git config --global user.signingkey "$key_id"
fi

# Create an SSH key in order to make SSH connection with remote repositories
if ! is_file ~/.ssh/id_ed25519.pub ; then
    log 'Setup gpg signing for git'
    ssh-keygen -t ed25519 -C "$git_email"
    log 'Copy and pates the SSH key below to GitHub, Gitlab and Bitbucket'
    cat ~/.ssh/id_ed25519.pub
fi

# Install runtimes via asdf
for plugin in $(awk '{print $1}' ~/.tool-versions) ; do
    if ! is_dir ~/.asdf/plugins/"$plugin" ; then
        if [ "$plugin" = nodejs ]  ; then
            asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git
        else
            asdf plugin add "$plugin"
        fi
    fi
done

is_runtime_versions_changed () {
    plugin="$1"
    specified=$(grep "$plugin" ~/.tool-versions | awk '{$1=""; print $0}')
    installed=$(asdf list "$plugin" 2>&1)

    is_changed=
    for version in $specified ; do
        match=$(echo "$installed" | grep "$version")
        [ -z "$match" ] && is_changed=1
    done

    [ "$is_changed" ]
}

for plugin in $(asdf plugin list) ; do
    if is_runtime_versions_changed "$plugin" ; then
        log "Install runtime: $plugin"
        asdf install "$plugin"
    fi
done

system_node_path=/usr/local/bin/node
if ! is_file "$system_node_path" ; then
    log "Create symlink to $system_node_path so that XCode can reference"
    sudo ln -s ~/.asdf/shims/node "$system_node_path"
fi

# Download atom-one-dark-terminal theme
if ! is_dir ~/terminal_themes/atom-one-dark-terminal ; then
    mkdir -p ~/terminal_themes
    git clone https://github.com/nathanbuchar/atom-one-dark-terminal.git ~/terminal_themes/atom-one-dark-terminal
fi

open "${HOME}/terminal_themes/atom-one-dark-terminal/scheme/terminal/One Dark.terminal"

# System Preferences
## Quit System Preferences App in order to prevent any conflicts
osascript -e 'tell application "System Preferences" to quit'

## Disable startup sound
sudo nvram StartupMute=%01
## Finder: show hidden files by default
defaults write com.apple.finder AppleShowAllFiles -bool true
## Finder: show all filename extensions
defaults write NSGlobalDomain AppleShowAllExtensions -bool true
## Finder: show list view by default
defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"
## Set the maximum speed for trackpad
defaults write -g com.apple.trackpad.scaling -float 3
## Enable tap to click
defaults write com.apple.AppleMultitouchTrackpad Clicking -bool true
## Set the Preffred Language Order
defaults write -g AppleLanguages -array "en" "ja"
## Set the Apperance to Dark
defaults write -g AppleInterfaceStyle -string "Dark"
## Set the size of Dock
defaults write com.apple.dock tilesize -int 35
## Remove all items from Dock
defaults write com.apple.dock persistent-apps -array
## Set the magnification of Dock
defaults write com.apple.dock magnification -bool false
## Set the positoin of Dock to left
defaults write com.apple.dock orientation -string "left"
## Set the autohide of Dock
defaults write com.apple.dock autohide -bool true
